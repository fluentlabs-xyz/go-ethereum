package vm

import (
	"fmt"
	zkwasm_gas_injector "github.com/wasm0/zkwasm-gas-injector"
)

const disableGasInjection = true

var WasmOpCodeToName = map[uint16]string{
	0x0000: "unreachable",
	0x0100: "nop",
	0x0200: "block",
	0x0300: "loop",
	0x0400: "if",
	0x0500: "else",
	0x0600: "try",
	0x0700: "catch",
	0x0800: "throw",
	0x0900: "rethrow",
	0x0b00: "end",
	0x0c00: "br",
	0x0d00: "br_if",
	0x0e00: "br_table",
	0x0f00: "return",
	0x1000: "call",
	0x1100: "call_indirect",
	0x1200: "return_call",
	0x1300: "return_call_indirect",
	0x1800: "delegate",
	0x1900: "catch_all",
	0x1a00: "drop",
	0x1b00: "select",
	0x1c00: "typed_select",
	0x2000: "local_get",
	0x2100: "local_set",
	0x2200: "local_tee",
	0x2300: "global_get",
	0x2400: "global_set",
	0x2500: "table_get",
	0x2600: "table_set",
	0x2800: "i32_load",
	0x2900: "i64_load",
	0x2a00: "f32_load",
	0x2b00: "f64_load",
	0x2c00: "i32_load8_s",
	0x2d00: "i32_load8_u",
	0x2e00: "i32_load16_s",
	0x2f00: "i32_load16_u",
	0x3000: "i64_load8_s",
	0x3100: "i64_load8_u",
	0x3200: "i64_load16_s",
	0x3300: "i64_load16_u",
	0x3400: "i64_load32_s",
	0x3500: "i64_load32_u",
	0x3600: "i32_store",
	0x3700: "i64_store",
	0x3800: "f32_store",
	0x3900: "f64_store",
	0x3a00: "i32_store8",
	0x3b00: "i32_store16",
	0x3c00: "i64_store8",
	0x3d00: "i64_store16",
	0x3e00: "i64_store32",
	0x3f00: "memory_size",
	0x4000: "memory_grow",
	0x4100: "i32_const",
	0x4200: "i64_const",
	0x4300: "f32_const",
	0x4400: "f64_const",
	0x4500: "i32_eqz",
	0x4600: "i32_eq",
	0x4700: "i32_ne",
	0x4800: "i32_lt_s",
	0x4900: "i32_lt_u",
	0x4a00: "i32_gt_s",
	0x4b00: "i32_gt_u",
	0x4c00: "i32_le_s",
	0x4d00: "i32_le_u",
	0x4e00: "i32_ge_s",
	0x4f00: "i32_ge_u",
	0x5000: "i64_eqz",
	0x5100: "i64_eq",
	0x5200: "i64_ne",
	0x5300: "i64_lt_s",
	0x5400: "i64_lt_u",
	0x5500: "i64_gt_s",
	0x5600: "i64_gt_u",
	0x5700: "i64_le_s",
	0x5800: "i64_le_u",
	0x5900: "i64_ge_s",
	0x5a00: "i64_ge_u",
	0x5b00: "f32_eq",
	0x5c00: "f32_ne",
	0x5d00: "f32_lt",
	0x5e00: "f32_gt",
	0x5f00: "f32_le",
	0x6000: "f32_ge",
	0x6100: "f64_eq",
	0x6200: "f64_ne",
	0x6300: "f64_lt",
	0x6400: "f64_gt",
	0x6500: "f64_le",
	0x6600: "f64_ge",
	0x6700: "i32_clz",
	0x6800: "i32_ctz",
	0x6900: "i32_popcnt",
	0x6a00: "i32_add",
	0x6b00: "i32_sub",
	0x6c00: "i32_mul",
	0x6d00: "i32_div_s",
	0x6e00: "i32_div_u",
	0x6f00: "i32_rem_s",
	0x7000: "i32_rem_u",
	0x7100: "i32_and",
	0x7200: "i32_or",
	0x7300: "i32_xor",
	0x7400: "i32_shl",
	0x7500: "i32_shr_s",
	0x7600: "i32_shr_u",
	0x7700: "i32_rotl",
	0x7800: "i32_rotr",
	0x7900: "i64_clz",
	0x7a00: "i64_ctz",
	0x7b00: "i64_popcnt",
	0x7c00: "i64_add",
	0x7d00: "i64_sub",
	0x7e00: "i64_mul",
	0x7f00: "i64_div_s",
	0x8000: "i64_div_u",
	0x8100: "i64_rem_s",
	0x8200: "i64_rem_u",
	0x8300: "i64_and",
	0x8400: "i64_or",
	0x8500: "i64_xor",
	0x8600: "i64_shl",
	0x8700: "i64_shr_s",
	0x8800: "i64_shr_u",
	0x8900: "i64_rotl",
	0x8a00: "i64_rotr",
	0x8b00: "f32_abs",
	0x8c00: "f32_neg",
	0x8d00: "f32_ceil",
	0x8e00: "f32_floor",
	0x8f00: "f32_trunc",
	0x9000: "f32_nearest",
	0x9100: "f32_sqrt",
	0x9200: "f32_add",
	0x9300: "f32_sub",
	0x9400: "f32_mul",
	0x9500: "f32_div",
	0x9600: "f32_min",
	0x9700: "f32_max",
	0x9800: "f32_copysign",
	0x9900: "f64_abs",
	0x9a00: "f64_neg",
	0x9b00: "f64_ceil",
	0x9c00: "f64_floor",
	0x9d00: "f64_trunc",
	0x9e00: "f64_nearest",
	0x9f00: "f64_sqrt",
	0xa000: "f64_add",
	0xa100: "f64_sub",
	0xa200: "f64_mul",
	0xa300: "f64_div",
	0xa400: "f64_min",
	0xa500: "f64_max",
	0xa600: "f64_copysign",
	0xa700: "i32_wrap_i64",
	0xa800: "i32_trunc_f32_s",
	0xa900: "i32_trunc_f32_u",
	0xaa00: "i32_trunc_f64_s",
	0xab00: "i32_trunc_f64_u",
	0xac00: "i64_extend_i32_s",
	0xad00: "i64_extend_i32_u",
	0xae00: "i64_trunc_f32_s",
	0xaf00: "i64_trunc_f32_u",
	0xb000: "i64_trunc_f64_s",
	0xb100: "i64_trunc_f64_u",
	0xb200: "f32_convert_i32_s",
	0xb300: "f32_convert_i32_u",
	0xb400: "f32_convert_i64_s",
	0xb500: "f32_convert_i64_u",
	0xb600: "f32_demote_f64",
	0xb700: "f64_convert_i32_s",
	0xb800: "f64_convert_i32_u",
	0xb900: "f64_convert_i64_s",
	0xba00: "f64_convert_i64_u",
	0xbb00: "f64_promote_f32",
	0xbc00: "i32_reinterpret_f32",
	0xbd00: "i64_reinterpret_f64",
	0xbe00: "f32_reinterpret_i32",
	0xbf00: "f64_reinterpret_i64",
	0xc000: "i32_extend8_s",
	0xc100: "i32_extend16_s",
	0xc200: "i64_extend8_s",
	0xc300: "i64_extend16_s",
	0xc400: "i64_extend32_s",
	0xd000: "ref_null",
	0xd100: "ref_is_null",
	0xd200: "ref_func",
	// 0xfc
	0xfc00: "i32_trunc_sat_f32_s",
	0xfc01: "i32_trunc_sat_f32_u",
	0xfc02: "i32_trunc_sat_f64_s",
	0xfc03: "i32_trunc_sat_f64_u",
	0xfc04: "i64_trunc_sat_f32_s",
	0xfc05: "i64_trunc_sat_f32_u",
	0xfc06: "i64_trunc_sat_f64_s",
	0xfc07: "i64_trunc_sat_f64_u",
	0xfc08: "memory_init",
	0xfc09: "data_drop",
	0xfc0a: "memory_copy",
	0xfc0b: "memory_fill",
	0xfc0c: "table_init",
	0xfc0d: "elem_drop",
	0xfc0e: "table_copy",
	0xfc0f: "table_grow",
	0xfc10: "table_size",
	0xfc11: "table_fill",
	0xfc12: "memory_discard",

	// 0xfd is not supported
	// 0xfe is not supported
}

const (
	GasImportedFunction = "gas"
)

func injectGasComputationAndStackProtection(
	destCode []byte,
) (ret []byte, err error) {
	if disableGasInjection {
		return destCode, nil
	}
	if destCode == nil {
		return nil, fmt.Errorf("no contract code to check")
	}
	injectRes, err := zkwasm_gas_injector.Inject(
		destCode,
		zkwasm_gas_injector.InjectTypeBoth,
		zkwasm_gas_injector.InjectGasTypeHost,
		1,
		10000,
		0,
		1024,
		zkwasm_gas_injector.ReturnFormatWasm,
	)
	if err != nil {
		return nil, err
	}
	if injectRes != nil {
		ret = injectRes
	}
	return
}
