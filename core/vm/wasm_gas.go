package vm

import (
	"fmt"
	zkwasm_gas_injector "github.com/wasm0/zkwasm-gas-injector"
)

const disableGasInjection = true

var WasmOpCodeToName = map[uint16]string{
	0x0000: "unreachable",
	0x0001: "nop",
	0x0002: "block",
	0x0003: "loop",
	0x0004: "if",
	0x0005: "else",
	0x0006: "try",
	0x0007: "catch",
	0x0008: "throw",
	0x0009: "rethrow",
	0x000b: "end",
	0x000c: "br",
	0x000d: "br_if",
	0x000e: "br_table",
	0x000f: "return",
	0x0010: "call",
	0x0011: "call_indirect",
	0x0012: "return_call",
	0x0013: "return_call_indirect",
	0x0018: "delegate",
	0x0019: "catch_all",
	0x001a: "drop",
	0x001b: "select",
	0x001c: "typed_select",
	0x0020: "local_get",
	0x0021: "local_set",
	0x0022: "local_tee",
	0x0023: "global_get",
	0x0024: "global_set",
	0x0025: "table_get",
	0x0026: "table_set",
	0x0028: "i32_load",
	0x0029: "i64_load",
	0x002a: "f32_load",
	0x002b: "f64_load",
	0x002c: "i32_load8_s",
	0x002d: "i32_load8_u",
	0x002e: "i32_load16_s",
	0x002f: "i32_load16_u",
	0x0030: "i64_load8_s",
	0x0031: "i64_load8_u",
	0x0032: "i64_load16_s",
	0x0033: "i64_load16_u",
	0x0034: "i64_load32_s",
	0x0035: "i64_load32_u",
	0x0036: "i32_store",
	0x0037: "i64_store",
	0x0038: "f32_store",
	0x0039: "f64_store",
	0x003a: "i32_store8",
	0x003b: "i32_store16",
	0x003c: "i64_store8",
	0x003d: "i64_store16",
	0x003e: "i64_store32",
	0x003f: "memory_size",
	0x0040: "memory_grow",
	0x0041: "i32_const",
	0x0042: "i64_const",
	0x0043: "f32_const",
	0x0044: "f64_const",
	0x0045: "i32_eqz",
	0x0046: "i32_eq",
	0x0047: "i32_ne",
	0x0048: "i32_lt_s",
	0x0049: "i32_lt_u",
	0x004a: "i32_gt_s",
	0x004b: "i32_gt_u",
	0x004c: "i32_le_s",
	0x004d: "i32_le_u",
	0x004e: "i32_ge_s",
	0x004f: "i32_ge_u",
	0x0050: "i64_eqz",
	0x0051: "i64_eq",
	0x0052: "i64_ne",
	0x0053: "i64_lt_s",
	0x0054: "i64_lt_u",
	0x0055: "i64_gt_s",
	0x0056: "i64_gt_u",
	0x0057: "i64_le_s",
	0x0058: "i64_le_u",
	0x0059: "i64_ge_s",
	0x005a: "i64_ge_u",
	0x005b: "f32_eq",
	0x005c: "f32_ne",
	0x005d: "f32_lt",
	0x005e: "f32_gt",
	0x005f: "f32_le",
	0x0060: "f32_ge",
	0x0061: "f64_eq",
	0x0062: "f64_ne",
	0x0063: "f64_lt",
	0x0064: "f64_gt",
	0x0065: "f64_le",
	0x0066: "f64_ge",
	0x0067: "i32_clz",
	0x0068: "i32_ctz",
	0x0069: "i32_popcnt",
	0x006a: "i32_add",
	0x006b: "i32_sub",
	0x006c: "i32_mul",
	0x006d: "i32_div_s",
	0x006e: "i32_div_u",
	0x006f: "i32_rem_s",
	0x0070: "i32_rem_u",
	0x0071: "i32_and",
	0x0072: "i32_or",
	0x0073: "i32_xor",
	0x0074: "i32_shl",
	0x0075: "i32_shr_s",
	0x0076: "i32_shr_u",
	0x0077: "i32_rotl",
	0x0078: "i32_rotr",
	0x0079: "i64_clz",
	0x007a: "i64_ctz",
	0x007b: "i64_popcnt",
	0x007c: "i64_add",
	0x007d: "i64_sub",
	0x007e: "i64_mul",
	0x007f: "i64_div_s",
	0x0080: "i64_div_u",
	0x0081: "i64_rem_s",
	0x0082: "i64_rem_u",
	0x0083: "i64_and",
	0x0084: "i64_or",
	0x0085: "i64_xor",
	0x0086: "i64_shl",
	0x0087: "i64_shr_s",
	0x0088: "i64_shr_u",
	0x0089: "i64_rotl",
	0x008a: "i64_rotr",
	0x008b: "f32_abs",
	0x008c: "f32_neg",
	0x008d: "f32_ceil",
	0x008e: "f32_floor",
	0x008f: "f32_trunc",
	0x0090: "f32_nearest",
	0x0091: "f32_sqrt",
	0x0092: "f32_add",
	0x0093: "f32_sub",
	0x0094: "f32_mul",
	0x0095: "f32_div",
	0x0096: "f32_min",
	0x0097: "f32_max",
	0x0098: "f32_copysign",
	0x0099: "f64_abs",
	0x009a: "f64_neg",
	0x009b: "f64_ceil",
	0x009c: "f64_floor",
	0x009d: "f64_trunc",
	0x009e: "f64_nearest",
	0x009f: "f64_sqrt",
	0x00a0: "f64_add",
	0x00a1: "f64_sub",
	0x00a2: "f64_mul",
	0x00a3: "f64_div",
	0x00a4: "f64_min",
	0x00a5: "f64_max",
	0x00a6: "f64_copysign",
	0x00a7: "i32_wrap_i64",
	0x00a8: "i32_trunc_f32_s",
	0x00a9: "i32_trunc_f32_u",
	0x00aa: "i32_trunc_f64_s",
	0x00ab: "i32_trunc_f64_u",
	0x00ac: "i64_extend_i32_s",
	0x00ad: "i64_extend_i32_u",
	0x00ae: "i64_trunc_f32_s",
	0x00af: "i64_trunc_f32_u",
	0x00b0: "i64_trunc_f64_s",
	0x00b1: "i64_trunc_f64_u",
	0x00b2: "f32_convert_i32_s",
	0x00b3: "f32_convert_i32_u",
	0x00b4: "f32_convert_i64_s",
	0x00b5: "f32_convert_i64_u",
	0x00b6: "f32_demote_f64",
	0x00b7: "f64_convert_i32_s",
	0x00b8: "f64_convert_i32_u",
	0x00b9: "f64_convert_i64_s",
	0x00ba: "f64_convert_i64_u",
	0x00bb: "f64_promote_f32",
	0x00bc: "i32_reinterpret_f32",
	0x00bd: "i64_reinterpret_f64",
	0x00be: "f32_reinterpret_i32",
	0x00bf: "f64_reinterpret_i64",
	0x00c0: "i32_extend8_s",
	0x00c1: "i32_extend16_s",
	0x00c2: "i64_extend8_s",
	0x00c3: "i64_extend16_s",
	0x00c4: "i64_extend32_s",
	0x00d0: "ref_null",
	0x00d1: "ref_is_null",
	0x00d2: "ref_func",
	// 0xfc
	0xfc00: "i32_trunc_sat_f32_s",
	0xfc01: "i32_trunc_sat_f32_u",
	0xfc02: "i32_trunc_sat_f64_s",
	0xfc03: "i32_trunc_sat_f64_u",
	0xfc04: "i64_trunc_sat_f32_s",
	0xfc05: "i64_trunc_sat_f32_u",
	0xfc06: "i64_trunc_sat_f64_s",
	0xfc07: "i64_trunc_sat_f64_u",
	0xfc08: "memory_init",
	0xfc09: "data_drop",
	0xfc0a: "memory_copy",
	0xfc0b: "memory_fill",
	0xfc0c: "table_init",
	0xfc0d: "elem_drop",
	0xfc0e: "table_copy",
	0xfc0f: "table_grow",
	0xfc10: "table_size",
	0xfc11: "table_fill",
	0xfc12: "memory_discard",

	// 0xfd is not supported
	// 0xfe is not supported
}

const (
	GasImportedFunction = "gas"
)

func injectGasComputationAndStackProtection(
	destCode []byte,
) (ret []byte, err error) {
	if disableGasInjection {
		return destCode, nil
	}
	if destCode == nil {
		return nil, fmt.Errorf("no contract code to check")
	}
	injectRes, err := zkwasm_gas_injector.Inject(
		destCode,
		zkwasm_gas_injector.InjectTypeBoth,
		zkwasm_gas_injector.InjectGasTypeHost,
		1,
		10000,
		0,
		1024,
		zkwasm_gas_injector.ReturnFormatWasm,
	)
	if err != nil {
		return nil, err
	}
	if injectRes != nil {
		ret = injectRes
	}
	return
}
